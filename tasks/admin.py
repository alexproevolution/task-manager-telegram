from django.contrib import admin
from django.urls import path
from django.shortcuts import redirect, get_object_or_404
from django.contrib import messages
from django.utils.html import format_html
from .models import TaskList, Task, Notification, TelegramProfile


@admin.register(TaskList)
class TaskListAdmin(admin.ModelAdmin):
    list_display = ['name', 'created_by', 'created_at']
    list_filter = ['created_at']
    search_fields = ['name']


@admin.register(Task)
class TaskAdmin(admin.ModelAdmin):
    list_display = [
        'title', 'list', 'assignee', 'status',
        'due_date', 'created_by', 'created_at'
    ]
    list_filter = ['status', 'created_at', 'due_date']
    search_fields = ['title', 'description']
    date_hierarchy = 'created_at'


@admin.register(Notification)
class NotificationAdmin(admin.ModelAdmin):
    list_display = ['message', 'user', 'is_read', 'created_at']
    list_filter = ['is_read', 'created_at', 'user']
    search_fields = ['message', 'user__email']
    date_hierarchy = 'created_at'
    readonly_fields = ['created_at']

    actions = ['mark_as_read']

    def mark_as_read(self, request, queryset):
        """Action ‚Äî –æ—Ç–º–µ—Ç–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ."""
        updated = queryset.update(is_read=True)
        self.message_user(request, f'–ü–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ {updated} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.')
    mark_as_read.short_description = "–ü–æ–º–µ—Ç–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ"


@admin.register(TelegramProfile)
class TelegramProfileAdmin(admin.ModelAdmin):
    list_display = ('user', 'chat_id', 'linked_at', 'link_token', 'open_link')
    search_fields = ('user__email', 'chat_id')
    fields = (
        'user', 'chat_id',
        'link_token_display', 'open_link',
        'linked_at', 'regenerate_token_button'
    )

    readonly_fields = (
        'link_token_display', 'open_link',
        'linked_at', 'chat_id', 'regenerate_token_button'
    )

    bot_username = "ITDeveloper_bot"

    def get_urls(self):
        urls = super().get_urls()
        custom_urls = [
            path(
                "regenerate_token/<int:pk>/",
                self.admin_site.admin_view(self.regenerate_token),
                name="telegramprofile_regenerate_token",
            ),
        ]
        return custom_urls + urls

    def regenerate_token(self, request, pk):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–∫–µ–Ω –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ –∞–¥–º–∏–Ω–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        profile = get_object_or_404(TelegramProfile, pk=pk)
        profile.regenerate_token()
        messages.success(request, f"‚úÖ –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {profile.link_token}")
        return redirect(request.META.get("HTTP_REFERER", "/admin/"))

    def link_token_display(self, obj):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–∫–µ–Ω –∫—Ä–∞—Å–∏–≤–æ."""
        if not obj or not obj.link_token:
            return "‚Äî"
        return format_html("<code>{}</code>", obj.link_token)
    link_token_display.short_description = "Link-—Ç–æ–∫–µ–Ω"

    def open_link(self, obj):
        """–ö–Ω–æ–ø–∫–∞ '–û—Ç–∫—Ä—ã—Ç—å –≤ Telegram'."""
        if not obj or not obj.link_token:
            return "‚Äî"
        url = f"https://t.me/{self.bot_username}?start={obj.link_token}"
        return format_html(
            '<a class="button" href="{}" target="_blank">–û—Ç–∫—Ä—ã—Ç—å –≤ Telegram</a>', url
        )
    open_link.short_description = "–°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏"

    def regenerate_token_button(self, obj):
        """–ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞ –ø—Ä—è–º–æ –≤ —Ñ–æ—Ä–º–µ."""
        if not obj or not obj.pk:
            return "‚Äî"
        return format_html(
            '<a class="button" href="{}">üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω</a>',
            f"../regenerate_token/{obj.pk}/"
        )
    regenerate_token_button.short_description = "–î–µ–π—Å—Ç–≤–∏–µ"
