from celery import shared_task
from django.conf import settings
from django.utils import timezone
import requests

from .models import TelegramProfile, Task, Notification


TG_BOT_TOKEN = getattr(settings, 'TG_BOT_TOKEN', None)
TG_API_SEND = (
    f"https://api.telegram.org/bot{TG_BOT_TOKEN}/sendMessage"
    if TG_BOT_TOKEN else None
)


@shared_task
def send_telegram_message(chat_id, text):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ Telegram Bot API."""
    if not TG_API_SEND:
        print("[TG ERROR] TG_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ settings.py")
        return {'ok': False, 'error': 'TG_BOT_TOKEN not configured'}

    payload = {
        'chat_id': str(chat_id),
        'text': text,
        'parse_mode': 'HTML',
    }

    try:
        response = requests.post(TG_API_SEND, json=payload, timeout=5)
        print(f"[TG SEND] ‚Üí {chat_id}: {response.status_code}")
        return {
            'ok': response.status_code == 200,
            'status': response.status_code,
            'text': response.text,
        }
    except Exception as e:
        print(f"[TG ERROR] {e}")
        return {'ok': False, 'error': str(e)}


@shared_task
def send_notification(user_id, message):
    """–°–æ–∑–¥–∞—ë—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ Telegram –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ chat_id."""
    try:
        Notification.objects.create(user_id=user_id, message=message)
        print(f"[Celery] Notification created for user {user_id}: {message}")

        profile = TelegramProfile.objects.filter(user_id=user_id).first()
        if profile and profile.chat_id:
            send_telegram_message.delay(profile.chat_id, message)
        else:
            print(f"[Celery] Telegram chat_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    except Exception as e:
        print(f"[Celery ERROR] send_notification: {e}")


@shared_task
def notify_assignment(task_id):
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –æ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ."""
    try:
        task = Task.objects.select_related('assignee', 'created_by').get(pk=task_id)
    except Task.DoesNotExist:
        print(f"[Celery] Task {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    if not task.assignee:
        print(f"[Celery] Task {task_id} –±–µ–∑ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è ‚Äî —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ")
        return

    creator_name = task.created_by.get_full_name() or task.created_by.email
    due_str = (
        task.due_date.strftime("%d.%m.%Y %H:%M")
        if task.due_date else "–ë–µ–∑ —Å—Ä–æ–∫–∞"
    )
    text = (
        f'üìù –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –æ—Ç <b>{creator_name}</b>:\n'
        f'"<b>{task.title}</b>"\n–°—Ä–æ–∫: {due_str}'
    )

    recent = Notification.objects.filter(
        user=task.assignee,
        message__icontains=task.title,
        created_at__gte=timezone.now() - timezone.timedelta(hours=1),
    )
    if not recent.exists():
        Notification.objects.create(user=task.assignee, message=text)

    profile = getattr(task.assignee, 'telegram_profile', None)
    if profile and profile.chat_id:
        send_telegram_message.delay(profile.chat_id, text)
        print(f"[Celery] Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {task.assignee.email}")
    else:
        print(f"[TG SKIP] –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {task.assignee.email} –Ω–µ—Ç chat_id")


@shared_task
def check_and_notify_overdue():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π."""
    now = timezone.now()
    overdue_tasks = Task.objects.filter(
        due_date__lt=now
    ).exclude(status='completed')

    for task in overdue_tasks:
        if not task.assignee:
            continue

        text = (
            f"‚è∞ –ó–∞–¥–∞—á–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞:\n"
            f"<b>{task.title}</b>\n"
            f"–°—Ä–æ–∫: {task.due_date.strftime('%d.%m.%Y %H:%M') if task.due_date else '‚Äî'}"
        )

        Notification.objects.create(user=task.assignee, message=text)

        profile = getattr(task.assignee, 'telegram_profile', None)
        if profile and profile.chat_id:
            send_telegram_message.delay(profile.chat_id, text)
        else:
            print(f"[TG SKIP] {task.assignee.email} –±–µ–∑ Telegram chat_id")
