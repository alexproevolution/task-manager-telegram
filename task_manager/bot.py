
import os
import logging
import aiohttp
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor

load_dotenv()

logging.basicConfig(level=logging.INFO)

BOT_TOKEN = os.getenv('TG_BOT_TOKEN')
API_BASE = os.getenv('API_BASE', 'http://127.0.0.1:8000')

if not BOT_TOKEN:
    raise RuntimeError("TG_BOT_TOKEN env variable is not set")

bot = Bot(token=BOT_TOKEN, parse_mode='HTML')
dp = Dispatcher(bot)


async def post_json(session, url, json_payload):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç POST-–∑–∞–ø—Ä–æ—Å —Å JSON –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç (status, json)."""
    async with session.post(url, json=json_payload, timeout=10) as resp:
        try:
            data = await resp.json()
        except Exception:
            data = {}
        return resp.status, data


@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    """–ü—Ä–∏–≤—è–∑–∫–∞ Telegram –∞–∫–∫–∞—É–Ω—Ç–∞ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /start <token>."""
    args = message.get_args()
    chat_id = str(message.chat.id)

    async with aiohttp.ClientSession() as session:
        if args:
            url = f"{API_BASE}/tasks/api/bot/link/"
            payload = {'token': args, 'chat_id': chat_id}
            status, data = await post_json(session, url, payload)

            if status == 200:
                await message.answer(
                    "‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!\n"
                    "–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–¥–∞—á–∞—Ö."
                )
            else:
                detail = data.get('detail') if isinstance(data, dict) else None
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏: {detail or status}")
        else:
            await message.answer(
                "üëã –ü—Ä–∏–≤–µ—Ç!\n"
                "–ß—Ç–æ–±—ã –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç ‚Äî —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ —Ç–æ–∫–µ–Ω –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ "
                "–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:\n\n<code>/start &lt;—Ç–æ–∫–µ–Ω&gt;</code>"
            )


@dp.message_handler(commands=['tasks'])
async def tasks_handler(message: types.Message):
    """–í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    chat_id = str(message.chat.id)
    async with aiohttp.ClientSession() as session:
        url = f"{API_BASE}/tasks/api/bot/tasks_by_chat/?chat_id={chat_id}"
        async with session.get(url, timeout=10) as resp:
            if resp.status != 200:
                await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á.")
                return
            data = await resp.json()

    if not data:
        await message.answer("üéâ –£ –≤–∞—Å –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∑–∞–¥–∞—á.")
        return

    for task in data:
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(
            types.InlineKeyboardButton(
                "‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π",
                callback_data=f"done:{task['id']}"
            )
        )
        txt = (
            f"<b>{task['title']}</b>\n"
            f"#ID: {task['id']}\n"
            f"–°—Ä–æ–∫: {task.get('due_date') or '‚Äî'}\n\n"
            f"{task.get('description') or ''}"
        )
        await message.answer(txt, reply_markup=keyboard)


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('done:'))
async def cb_done(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π'."""
    task_id = callback_query.data.split(':', 1)[1]
    chat_id = str(callback_query.message.chat.id)

    async with aiohttp.ClientSession() as session:
        url = f"{API_BASE}/tasks/api/bot/complete_by_chat/"
        payload = {'chat_id': chat_id, 'task_id': task_id}
        status, data = await post_json(session, url, payload)

        if status == 200:
            await callback_query.answer("‚úÖ –ó–∞–¥–∞—á–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è!")
            await bot.edit_message_reply_markup(
                chat_id=callback_query.from_user.id,
                message_id=callback_query.message.message_id,
                reply_markup=None
            )
        else:
            error = data.get('detail', 'unknown')
            await callback_query.answer(f"‚ùå –û—à–∏–±–∫–∞: {error}", show_alert=True)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
